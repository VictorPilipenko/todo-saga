{"version":3,"sources":["pages/todo/containers/template/index.styled.js","pages/todo/containers/template/index.js","store/queries/todo.js","common/pagination/index.js","pages/todo/components/add/index.styled.js","pages/todo/components/add/index.js","pages/todo/components/item/index.styled.js","pages/todo/components/item/index.js","pages/todo/components/list/index.js","pages/todo/containers/index.styled.js","hooks/useDispatchOnFirstMount.js","pages/todo/containers/index.js","pages/todo/index.js"],"names":["TemplateBlock","styled","div","Template","children","callOnPageVisibility","isFirstMount","useIsFirstMount","isVisible","usePageVisibility","useEffect","console","log","name","axiosCache","reset","queries","page","selector","state","todos","pagination","currentPage","action","setCurrentPage","stringToValue","string","Number","parseInt","size","pageSize","setPageSize","PaginationComponent","current","total","onChange","rest","RowBox","AddForm","onFormSubmit","loading","intl","useIntl","useForm","form","dispatch","useDispatch","onFinish","getFieldValue","resetFields","layout","justify","gutter","wrap","Item","rules","required","message","placeholder","formatMessage","id","type","htmlType","block","disabled","PlusCircleFilled","totalCount","showSizeChanger","getTodos","pageSizeOptions","TagBox","ColBox","todo","onTodoRemoval","onTodoToggle","useModal","showModal","renderModal","confirmLoading","areFetching","onOk","render","actions","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","checked","details","done","danger","onClick","color","text","fetchingError","showIcon","closable","TodoList","err","description","length","active","locale","emptyText","dataSource","renderItem","PageHeaderStyled","useDispatchOnFirstMount","handler","TodosContainer","useSelector","items","title","subTitle","data","createTodo","deleteTodo","markTodoDone","reduxQuerySync","store","params","initialTruth","replaceState","App"],"mappings":"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","file":"static/js/12.2f622ece.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const TemplateBlock = styled.div`\n  max-width: 512px;\n  position: relative;\n  margin: 0 auto;\n`;\n","import { useEffect } from \"react\";\r\nimport { usePageVisibility } from \"../../../../hooks/usePageVisibility\";\r\nimport { axiosCache } from \"../../../../config/axios\";\r\nimport { useIsFirstMount } from \"../../../../hooks/useIsFirstMount\";\r\nimport { TemplateBlock } from \"./index.styled\";\r\n\r\nconst Template = ({ children, callOnPageVisibility }) => {\r\n  const isFirstMount = useIsFirstMount()\r\n  const isVisible = usePageVisibility()\r\n\r\n  useEffect(() => {\r\n    if (\r\n      typeof callOnPageVisibility === \"function\" &&\r\n      isVisible &&\r\n      !isFirstMount\r\n    ) {\r\n      console.log(`${callOnPageVisibility?.name} from Template on usePageVisibility hook by isVisible === true`)\r\n      axiosCache.reset()\r\n      callOnPageVisibility()\r\n    }\r\n  }, [ // eslint-disable-line\r\n    isVisible, \r\n    // isFirstMount,\r\n    // callOnPageVisibility, \r\n  ]) \r\n\r\n  return <TemplateBlock>{children}</TemplateBlock>\r\n}\r\n\r\nexport default Template\r\n","import { setCurrentPage, setPageSize } from \"../actions/todo\";\n\nconst queries = {\n\tpage: {\n\t\tselector: state => state.todos.pagination.currentPage,\n    action: setCurrentPage,\n    stringToValue: string => Number.parseInt(string) || 1\n  },\n  size: {\n\t\tselector: state => state.todos.pagination.pageSize,\n    action: setPageSize,\n    stringToValue: string => Number.parseInt(string) || 1\n  },\n};\n\nexport default queries","import { Pagination } from 'antd'\n\nconst PaginationComponent = ({\n  current,\n  total,\n  pageSize,\n  onChange,\n  ...rest\n}) => {\n  return (\n    <Pagination\n      current={current}\n      total={total}\n      pageSize={pageSize}\n      onChange={onChange}\n      {...rest}\n    />\n  );\n}\n\nexport default PaginationComponent\n","import styled from \"styled-components\"\nimport {  Row } from 'antd'\n\nexport const RowBox = styled(Row)`\n  margin-bottom: 10px; \n`;\n","import { useDispatch } from 'react-redux';\nimport { Form, Row, Col, Button, Input } from 'antd';\nimport { PlusCircleFilled } from '@ant-design/icons';\nimport { getTodos } from '../../../../store/actions/todo';\nimport Pagination from '../../../../common/pagination';\nimport { Default } from '../../../../common/responsive';\nimport { RowBox } from './index.styled';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nconst AddForm = ({ onFormSubmit, loading, pagination }) => {\n  const intl = useIntl()\n  const [form] = Form.useForm()\n\n  const dispatch = useDispatch()\n\n  const onFinish = () => {\n    onFormSubmit({\n      name: form.getFieldValue('name')\n    })\n    form.resetFields()\n  }\n\n  const onChange = (page, pageSize) => {\n    dispatch(getTodos({\n      page,\n      pageSize\n    }))\n  }\n\n  return (\n    <Form\n      form={form}\n      onFinish={onFinish}\n      layout=\"horizontal\"\n    >\n      <Row justify='space-between'>\n        <RowBox gutter={15} wrap={false} >\n          <Col>\n            <Form.Item\n              name={'name'}\n              rules={[{\n                required: true,\n                message: 'This field is required'\n              }]}\n            >\n              <Input placeholder={intl.formatMessage({ id: 'todo.input.placeholder' })} />\n            </Form.Item>\n          </Col>\n          <Col>\n            <Button type=\"primary\" htmlType=\"submit\" block disabled={loading}>\n              <PlusCircleFilled />\n              <Default> <FormattedMessage id=\"todo.input.button\" /></Default>\n            </Button>\n          </Col>\n        </RowBox>\n\n        <Col>\n          <Pagination\n            current={pagination.currentPage}\n            total={pagination.totalCount}\n            pageSize={pagination.pageSize}\n            showSizeChanger\n            onChange={onChange}\n            pageSizeOptions={['1', '2', '5', '10']}\n          />\n        </Col>\n      </Row>\n\n    </Form>\n  )\n}\n\nexport default AddForm\n","import styled from \"styled-components\";\nimport { Tag, Row, Col } from 'antd';\n\nexport const TagBox = styled(Tag)`\n  white-space: normal !important;\n  word-break: break-all;\n`;\n\nexport const ColBox = styled(Col)`\n  margin: 10px 0px 0px 0px;\n`;\n\nexport const RowBox = styled(Row)`\n  flex-direction: column !important; \n`;\n","import { List, Button, Switch, Alert, Col } from 'antd';\nimport { CloseOutlined, CheckOutlined } from '@ant-design/icons';\nimport { ColBox, RowBox, TagBox } from './index.styled';\nimport { useModal } from '../../../../common/modal/default';\nimport { FormattedMessage } from 'react-intl';\n\nconst Item = ({ todo, onTodoRemoval, onTodoToggle }) => {\n  const { showModal, renderModal } = useModal()\n\n  return <>\n    {\n      renderModal({\n        confirmLoading: todo.areFetching,\n        onOk: () => onTodoRemoval(todo),\n        render: () => (\n          <h3><FormattedMessage id=\"todo.modal.delete.title\" /></h3>\n        )\n      })\n    }\n    <List.Item\n      actions={[\n        <Switch\n          loading={todo.areFetching}\n          checkedChildren={<CheckOutlined />}\n          unCheckedChildren={<CloseOutlined />}\n          onChange={state => onTodoToggle({ todo, state })}\n          checked={todo.details.done}\n        />,\n        <Button\n          danger\n          type=\"primary\"\n          disabled={todo.areFetching}\n          onClick={showModal}\n        >\n          X\n        </Button>\n      ]}\n      key={todo.details.id}\n    >\n      <RowBox>\n        <Col>\n          <TagBox color={todo.details.done ? 'green' : 'red'}>\n            {todo.details.text}\n          </TagBox>\n        </Col>\n        {\n          todo.fetchingError &&\n          <ColBox>\n            <Alert message={todo.fetchingError} type=\"error\" showIcon closable />\n          </ColBox>\n        }\n      </RowBox>\n    </List.Item>\n  </>\n}\n\nexport default Item\n","import { Alert, List, Skeleton } from 'antd'\nimport Item from '../item'\n\nconst TodoList = ({ err, loading, todos, onTodoRemoval, onTodoToggle }) => {\n  return <>\n    {err ?\n      <Alert\n        message=\"Ошибка\"\n        description={err}\n        type=\"error\"\n      />\n      :\n      <Skeleton loading={loading && todos.length === 0} active>\n        <List\n          loading={loading}\n          locale={{\n            emptyText: \"Делать нечего :(\"\n          }}\n          dataSource={todos}\n          renderItem={todo =>\n            <Item\n              key={todo.details.id}\n              todo={todo}\n              onTodoToggle={onTodoToggle}\n              onTodoRemoval={onTodoRemoval}\n            />\n          }\n        />\n      </Skeleton>}\n  </>\n}\n\nexport default TodoList\n","import styled from \"styled-components\";\nimport { PageHeader } from 'antd';\n\nexport const PageHeaderStyled = styled(PageHeader)`\n.ant-page-header-heading-title {\n  overflow: visible;\n}\n.ant-page-header-heading-sub-title {\n  white-space: normal;\n}\n`;\n","import { useEffect } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { useIsFirstMount } from \"./useIsFirstMount\"\r\n\r\nconst useDispatchOnFirstMount = ({ handler }) => {\r\n  const dispatch = useDispatch()\r\n  const isFirstMount = useIsFirstMount()\r\n  useEffect(() => {\r\n    if (isFirstMount) {\r\n      dispatch(handler)\r\n    }\r\n  }, [\r\n    dispatch,\r\n    isFirstMount,\r\n    handler,\r\n  ])\r\n}\r\n\r\nexport default useDispatchOnFirstMount","import { Row, Card } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { FormattedMessage } from 'react-intl'\nimport { markTodoDone, deleteTodo, createTodo, getTodos } from '../../../store/actions/todo'\nimport AddTodoForm from '../components/add'\nimport TodoList from '../components/list'\nimport { Default } from '../../../common/responsive'\nimport { PageHeaderStyled } from './index.styled'\nimport useDispatchOnFirstMount from '../../../hooks/useDispatchOnFirstMount'\n\nconst TodosContainer = () => {\n  const dispatch = useDispatch()\n  const { items, loading, err, pagination } = useSelector(state => state.todos)\n\n  useDispatchOnFirstMount({\n    handler: getTodos({\n      page: pagination.currentPage,\n      pageSize: pagination.pageSize\n    })\n  })\n\n  const handleFormSubmit = (todo) => {\n    const data = {\n      text: todo.name,\n      done: false\n    }\n    dispatch(createTodo(data))\n  }\n\n  const handleRemoveTodo = (todo) => {\n    const data = {\n      id: todo.details.id\n    }\n    dispatch(deleteTodo(data))\n  }\n\n  const handleTodoToggle = ({ todo, state }) => {\n    const data = {\n      id: todo.details.id,\n      done: state\n    }\n    dispatch(markTodoDone(data))\n  }\n\n  return (\n    <>\n      <Default>\n        <Row>\n          <PageHeaderStyled\n            title={<FormattedMessage id=\"todo.hader.title\" />}\n            subTitle={<FormattedMessage id=\"todo.hader.subtitle\" />}\n          />\n        </Row>\n      </Default>\n      <Card title={\n        <FormattedMessage id=\"todo.input.title\" />\n      }>\n        <AddTodoForm onFormSubmit={handleFormSubmit} loading={loading} pagination={pagination} />\n      </Card>\n      <Card title={\n        <FormattedMessage id=\"list.title\" />\n      }>\n        <TodoList\n          err={err}\n          loading={loading}\n          todos={items}\n          onTodoRemoval={handleRemoveTodo}\n          onTodoToggle={handleTodoToggle}\n        />\n      </Card>\n    </>\n  )\n}\n\nexport default TodosContainer\n","\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport reduxQuerySync from 'redux-query-sync';\r\nimport Template from \"./containers/template\";\r\nimport { getTodos } from \"../../store/actions/todo\";\r\nimport queries from \"../../store/queries/todo\";\r\nimport store from \"../../store\"\r\nimport TodosContainer from \"./containers\";\r\nreduxQuerySync({\r\n  store,\r\n  params: queries,\r\n  initialTruth: 'location',\r\n  replaceState: true\r\n})\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch()\r\n  const { pagination } = useSelector(state => state.todos)\r\n\r\n  const getTodosAPI = () => {\r\n    dispatch(getTodos({\r\n      page: pagination.currentPage,\r\n      pageSize: pagination.pageSize\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <Template callOnPageVisibility={getTodosAPI}>\r\n      <TodosContainer />\r\n    </Template>\r\n  )\r\n}\r\nexport default App\r\n"],"sourceRoot":""}