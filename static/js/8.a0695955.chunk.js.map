{"version":3,"sources":["pages/todo/containers/template/index.styled.js","pages/todo/containers/template/index.js","store/queries/todo.js","common/pagination/index.js","pages/todo/components/add/index.styled.js","pages/todo/components/add/index.js","pages/todo/components/item/index.styled.js","pages/todo/components/item/index.js","pages/todo/components/list/index.js","pages/todo/containers/index.js","pages/todo/index.js"],"names":["TemplateBlock","styled","div","Template","children","callOnPageVisibility","dispatch","useDispatch","isFirstMount","useIsFirstMount","isVisible","usePageVisibility","useEffect","console","log","name","axiosCache","reset","page","selector","state","todos","pagination","currentPage","action","setCurrentPage","stringToValue","string","Number","parseInt","size","pageSize","setPageSize","PaginationComponent","current","total","onChange","rest","RowBox","AddForm","onFormSubmit","loading","useForm","form","getTodos","onFinish","getFieldValue","resetFields","layout","justify","gutter","wrap","Item","rules","required","message","placeholder","type","htmlType","block","disabled","PlusCircleFilled","totalCount","showSizeChanger","pageSizeOptions","TagBox","ColBox","todo","onTodoRemoval","onTodoToggle","useModal","showModal","renderModal","confirmLoading","areFetching","onOk","render","actions","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","checked","details","done","danger","onClick","color","text","fetchingError","showIcon","closable","id","TodoList","err","description","length","active","locale","emptyText","dataSource","renderItem","TodosContainer","useSelector","items","title","subTitle","data","createTodo","deleteTodo","markTodoDone","reduxQuerySync","store","params","queries","initialTruth","replaceState","pageTitle","pageDescription","App","Helmet","property","content"],"mappings":"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","file":"static/js/8.a0695955.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const TemplateBlock = styled.div`\n  max-width: 512px;\n  position: relative;\n  margin: 0 auto;\n`;\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { usePageVisibility } from \"../../../../hooks/usePageVisibility\";\nimport { axiosCache } from \"../../../../config/axios\";\nimport { useIsFirstMount } from \"../../../../hooks/useIsFirstMount\";\nimport { TemplateBlock } from \"./index.styled\";\n\nconst Template = ({ children, callOnPageVisibility }) => {\n  const dispatch = useDispatch()\n  const isFirstMount = useIsFirstMount()\n  const isVisible = usePageVisibility()\n\n  useEffect(() => {\n    if (\n      typeof callOnPageVisibility === \"function\" &&\n      isVisible &&\n      !isFirstMount\n    ) {\n      console.log(`${callOnPageVisibility?.name} from Template on usePageVisibility hook by isVisible === true`)\n      axiosCache.reset()\n      dispatch(callOnPageVisibility())\n    }\n  }, [isVisible]) // eslint-disable-line\n\n  return <TemplateBlock>{children}</TemplateBlock>\n}\n\nexport default Template\n","import { setCurrentPage, setPageSize } from \"../actions/todo\";\n\nexport default {\n\tpage: {\n\t\tselector: state => state.todos.pagination.currentPage,\n    action: setCurrentPage,\n    stringToValue: string => Number.parseInt(string) || 1\n  },\n  size: {\n\t\tselector: state => state.todos.pagination.pageSize,\n    action: setPageSize,\n    stringToValue: string => Number.parseInt(string) || 1\n  },\n};\n","import React from 'react'\nimport { Pagination } from 'antd'\n\nconst PaginationComponent = ({\n  current,\n  total,\n  pageSize,\n  onChange,\n  ...rest\n}) => {\n  return (\n    <Pagination\n      current={current}\n      total={total}\n      pageSize={pageSize}\n      onChange={onChange}\n      {...rest}\n    />\n  );\n}\n\nexport default PaginationComponent\n","import styled from \"styled-components\"\nimport {  Row } from 'antd'\n\nexport const RowBox = styled(Row)`\n  margin-bottom: 10px; \n`;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Form, Row, Col, Button, Input } from 'antd';\nimport { PlusCircleFilled } from '@ant-design/icons';\nimport { getTodos } from '../../../../store/actions/todo';\nimport Pagination from '../../../../common/pagination';\nimport { Default } from '../../../../common/responsive';\nimport { RowBox } from './index.styled';\n\nconst AddForm = ({ onFormSubmit, loading, pagination }) => {\n  const [form] = Form.useForm()\n\n  const dispatch = useDispatch()\n\n  const onFinish = () => {\n    onFormSubmit({\n      name: form.getFieldValue('name')\n    })\n    form.resetFields()\n  }\n\n  const onChange = (page, pageSize) => {\n    dispatch(getTodos({\n      page,\n      pageSize\n    }))\n  }\n\n  useEffect(() => {\n    dispatch(getTodos({\n      page: pagination.currentPage,\n      pageSize: pagination.pageSize\n    }))\n  }, []) // eslint-disable-line\n\n  return (\n    <Form\n      form={form}\n      onFinish={onFinish}\n      layout=\"horizontal\"\n    >\n      <Row justify='space-between'>\n        <RowBox gutter={15} wrap={false} >\n          <Col>\n            <Form.Item\n              name={'name'}\n              rules={[{\n                required: true,\n                message: 'This field is required'\n              }]}\n            >\n              <Input placeholder=\"What needs to be done?\" />\n            </Form.Item>\n          </Col>\n          <Col>\n            <Button type=\"primary\" htmlType=\"submit\" block disabled={loading}>\n              <PlusCircleFilled />\n              <Default> Add todo</Default>\n            </Button>\n          </Col>\n        </RowBox>\n\n        <Col>\n          <Pagination\n            current={pagination.currentPage}\n            total={pagination.totalCount}\n            pageSize={pagination.pageSize}\n            showSizeChanger\n            onChange={onChange}\n            pageSizeOptions={['1', '2', '5', '10']}\n          />\n        </Col>\n      </Row>\n\n    </Form>\n  )\n}\n\nexport default AddForm\n","import styled from \"styled-components\";\nimport { Tag, Row, Col } from 'antd';\n\nexport const TagBox = styled(Tag)`\n  white-space: normal !important;\n  word-break: break-all;\n`;\n\nexport const ColBox = styled(Col)`\n  margin: 10px 0px 0px 0px;\n`;\n\nexport const RowBox = styled(Row)`\n  flex-direction: column !important; \n`;\n","import React from 'react';\nimport { List, Button, Switch, Alert, Col } from 'antd';\nimport { CloseOutlined, CheckOutlined } from '@ant-design/icons';\nimport { ColBox, RowBox, TagBox } from './index.styled';\nimport { useModal } from '../../../../common/modal/default';\n\nconst Item = ({ todo, onTodoRemoval, onTodoToggle }) => {\n  const { showModal, renderModal } = useModal()\n\n  return <>\n    {\n      renderModal({\n        confirmLoading: todo.areFetching,\n        onOk: () => onTodoRemoval(todo),\n        render: () => (\n          <h3>{'Вы уверены, что хотите удалить?'}</h3>\n        )\n      })\n    }\n    <List.Item\n      actions={[\n        <Switch\n          loading={todo.areFetching}\n          checkedChildren={<CheckOutlined />}\n          unCheckedChildren={<CloseOutlined />}\n          onChange={state => onTodoToggle({ todo, state })}\n          checked={todo.details.done}\n        />,\n        <Button\n          danger\n          type=\"primary\"\n          disabled={todo.areFetching}\n          onClick={showModal}\n        >\n          X\n        </Button>\n      ]}\n      key={todo.details.id}\n    >\n      <RowBox>\n        <Col>\n          <TagBox color={todo.details.done ? 'green' : 'red'}>\n            {todo.details.text}\n          </TagBox>\n        </Col>\n        {\n          todo.fetchingError &&\n          <ColBox>\n            <Alert message={todo.fetchingError} type=\"error\" showIcon closable />\n          </ColBox>\n        }\n      </RowBox>\n    </List.Item>\n  </>\n}\n\nexport default Item\n","import React from 'react'\nimport { Alert, List, Skeleton } from 'antd'\nimport Item from '../item'\n\nconst TodoList = ({ err, loading, todos, onTodoRemoval, onTodoToggle }) => {\n  return <>\n    {err ?\n      <Alert\n        message=\"Ошибка\"\n        description={err}\n        type=\"error\"\n      />\n      :\n      <Skeleton loading={loading && todos.length === 0} active>\n        <List\n          loading={loading}\n          locale={{\n            emptyText: \"Делать нечего :(\"\n          }}\n          dataSource={todos}\n          renderItem={todo =>\n            <Item\n              key={todo.details.id}\n              todo={todo}\n              onTodoToggle={onTodoToggle}\n              onTodoRemoval={onTodoRemoval}\n            />\n          }\n        />\n      </Skeleton>}\n  </>\n}\n\nexport default TodoList\n","import React from 'react'\nimport { Row, Card, PageHeader } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { markTodoDone, deleteTodo, createTodo } from '../../../store/actions/todo'\nimport AddTodoForm from '../components/add'\nimport TodoList from '../components/list'\nimport { Default } from '../../../common/responsive'\n\nconst TodosContainer = () => {\n  const { items, loading, err, pagination } = useSelector(state => state.todos)\n\n  const dispatch = useDispatch()\n\n  const handleFormSubmit = (todo) => {\n    const data = {\n      text: todo.name,\n      done: false\n    }\n    dispatch(createTodo(data))\n  }\n\n  const handleRemoveTodo = (todo) => {\n    const data = {\n      id: todo.details.id\n    }\n    dispatch(deleteTodo(data))\n  }\n\n  const handleTodoToggle = ({ todo, state }) => {\n    const data = {\n      id: todo.details.id,\n      done: state\n    }\n    dispatch(markTodoDone(data))\n  }\n\n  return (\n    <>\n      <Default>\n        <Row>\n          <PageHeader\n            title=\"Add Todo\"\n            subTitle=\"To add a todo, just fill the form below and click in add todo.\"\n          />\n        </Row>\n      </Default>\n      <Card title=\"Create a new todo\">\n        <AddTodoForm onFormSubmit={handleFormSubmit} loading={loading} pagination={pagination} />\n      </Card>\n      <Card title=\"Todo List\">\n        <TodoList\n          err={err}\n          loading={loading}\n          todos={items}\n          onTodoRemoval={handleRemoveTodo}\n          onTodoToggle={handleTodoToggle}\n        />\n      </Card>\n    </>\n  )\n}\n\nexport default TodosContainer\n","\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useSelector } from \"react-redux\";\nimport reduxQuerySync from 'redux-query-sync';\nimport Template from \"./containers/template\";\nimport { getTodos } from \"../../store/actions/todo\";\nimport queries from \"../../store/queries/todo\";\nimport store from \"../../store\"\nimport TodosContainer from \"./containers\";\nreduxQuerySync({\n  store,\n  params: queries,\n  initialTruth: 'location',\n  replaceState: true\n})\n\nconst pageTitle = \"todo - Main Page\"\nconst pageDescription = \"We love learning - every day, in every form.\"\n\nconst App = () => {\n  const { pagination } = useSelector(state => state.todos)\n\n  const getTodosAPI = () => {\n    return getTodos({\n      page: pagination.currentPage,\n      pageSize: pagination.pageSize\n    })\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{pageTitle}</title>\n        <meta property=\"og:title\" content={pageTitle} />\n        <meta name=\"description\" content={pageDescription} />\n        <meta name=\"twitter:title\" content={pageTitle} />\n        <meta name=\"twitter:description\" content={pageDescription} />\n      </Helmet>\n      <Template callOnPageVisibility={getTodosAPI}>\n        <TodosContainer />\n      </Template>\n    </>\n  );\n}\nexport default App;\n"],"sourceRoot":""}