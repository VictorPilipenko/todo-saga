{"version":3,"sources":["common/button/index.js","pages/todo/containers/template.js","common/pagination/index.js","pages/todo/components/head.js","pages/todo/components/item.js","pages/todo/components/list.js","common/input/index.js","pages/todo/components/create.js","store/queries/todo.js","pages/todo/table/components/add/index.js","pages/todo/table/components/item/index.js","pages/todo/table/components/list/index.js","pages/todo/table/index.js","pages/todo/index.js"],"names":["CircleButton","styled","button","props","open","css","Button","TemplateBlock","div","Template","children","callOnPageVisibility","dispatch","useDispatch","isFirstMount","useIsFirstMount","isVisible","usePageVisibility","useEffect","console","log","name","axiosCache","reset","PaginationComponent","current","total","pageSize","onChange","rest","Remove","li","done","ul","disabled","input","slideup","keyframes","slidedown","form","disappear","page","selector","state","todos","pagination","currentPage","action","setCurrentPage","stringToValue","string","Number","parseInt","size","setPageSize","AddForm","onFormSubmit","loading","useForm","getTodos","onFinish","getFieldValue","resetFields","layout","justify","gutter","Item","rules","required","message","placeholder","type","htmlType","block","PlusCircleFilled","totalCount","showSizeChanger","pageSizeOptions","TagBox","ColBox","RowBox","todo","onTodoRemoval","onTodoToggle","actions","areFetching","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","checked","details","title","onConfirm","danger","color","text","fetchingError","showIcon","closable","id","TodoList","err","description","locale","emptyText","dataSource","renderItem","TodosContainer","useSelector","items","subTitle","data","createTodo","deleteTodo","markTodoDone","reduxQuerySync","store","params","queries","initialTruth","replaceState","pageTitle","pageDescription","App","Helmet","property","content"],"mappings":"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","file":"static/js/8.91dcc5d9.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\n\nexport const CircleButton = styled.button`\n  background: #38d9a9;\n  &:hover {\n    background: #63e6be;\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.5), 0px 0px 1px rgba(0, 0, 0, 0.5);\n  }\n  &:active {\n    background: #20c997;\n  }\n  z-index: 5;\n  cursor: pointer;\n  width: 80px;\n  height: 80px;\n  font-size: 60px;\n  position: absolute;\n  left: 50%;\n  bottom: 0px;\n  transform: translate(-50%, 50%);\n  color: white;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: 0.125s all ease-in;\n  ${props =>\n    props.open &&\n    css`\n      background: #ff6b6b;\n      &:hover {\n        background: #ff8787;\n      }\n      &:active {\n        background: #fa5252;\n      }\n      transform: translate(-50%, 50%) rotate(45deg);\n    `}\n`;\n\nexport const Button = styled.button`\n  background: #38d9a9;\n  &:hover {\n    background: #63e6be;\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.5), 0px 0px 1px rgba(0, 0, 0, 0.5);\n  }\n  &:active {\n    background: #20c997;\n  }\n  z-index: 5;\n  cursor: pointer;\n  padding: 15px;\n  position: absolute;\n  left: 50%;\n  transform: translate(-50%, 50%);\n  color: white;\n  border-radius: 10px;\n  border: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: 0.125s all ease-in;\n  bottom: 20%;\n`;\n\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport { usePageVisibility } from \"../../../hooks/usePageVisibility\";\nimport { axiosCache } from \"../../../config/axios\";\nimport { useIsFirstMount } from \"../../../hooks/useIsFirstMount\";\n\nconst TemplateBlock = styled.div`\n  max-width: 512px;\n  position: relative;\n  margin: 0 auto;\n`;\n\nconst Template = ({ children, callOnPageVisibility }) => {\n  const dispatch = useDispatch()\n  const isFirstMount = useIsFirstMount()\n  const isVisible = usePageVisibility()\n\n  useEffect(() => {\n    if (\n      typeof callOnPageVisibility === \"function\" &&\n      isVisible &&\n      !isFirstMount\n    ) {\n      console.log(`${callOnPageVisibility?.name} from Template on usePageVisibility hook by isVisible === true`)\n      axiosCache.reset()\n      dispatch(callOnPageVisibility())\n    }\n  }, [isVisible]) // eslint-disable-line\n\n  return <TemplateBlock>{children}</TemplateBlock>\n}\n\nexport default Template;\n","import React from 'react'\nimport { Pagination } from 'antd'\n\nconst PaginationComponent = ({\n  current,\n  total,\n  pageSize,\n  onChange,\n  ...rest\n}) => {\n  return (\n    <Pagination\n      current={current}\n      total={total}\n      pageSize={pageSize}\n      onChange={onChange}\n      {...rest}\n    />\n  );\n}\n\nexport default PaginationComponent\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport Pagination from \"../../../common/pagination\"\n\nconst TodoHeadBlock = styled.div`\n  padding-top: 48px;\n  padding-left: 32px;\n  padding-right: 32px;\n  padding-bottom: 24px;\n  border-bottom: 1px solid #e9ecef;\n  h1 {\n    margin: 0;\n    font-size: 21px;\n    color: #868e96;\n  }\n`\n\nconst TodoHead = ({ pagination, setPageSize, pageChangeHandler, loading }) => {\n  return (\n    <TodoHeadBlock>\n      <Pagination\n        loading={loading}\n        currentPage={pagination.currentPage}\n        pageSize={pagination.pageSize}\n        totalPages={pagination.totalPages}\n        valueHandler={setPageSize}\n        pageChangeHandler={pageChangeHandler}\n        options={[1, 2, 3]}\n      />\n    </TodoHeadBlock>\n  );\n}\n\nexport default React.memo(TodoHead)\n","import React, { memo } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { MdDelete, MdDone } from \"react-icons/md\";\nimport { Loader } from \"../../../common/loader\";\n\nconst Remove = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #dee2e6;\n  font-size: 24px;\n  cursor: pointer;\n  &:hover {\n    color: #ff6b6b;\n  }\n  display: none;\n`;\nconst TodoItemBlock = styled.li`\n  display: flex;\n  align-items: center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  &:hover {\n    background: #63f7cb2b;\n    ${Remove} {\n      display: initial;\n    }\n  }\n`;\nconst CheckCircle = styled.div`\n  position: relative;\n  width: 35px;\n  height: 35px;\n  border-radius: 50%;\n  border: 1px solid #ced4da;\n  font-size: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  cursor: pointer;\n  ${props =>\n    props.done &&\n    css`\n      border: 1px solid #38d9a9;\n      color: #38d9a9;\n    `}\n`;\nconst Text = styled.div`\n  flex: 1;\n  font-size: 21px;\n  color: #495057;\n  ${props =>\n    props.done &&\n    css`\n      color: #ced4da;\n    `}\n`;\n\nconst TodoItem = ({ details: { id, done, text }, markTodoDone, deleteTodoById, fetchingError, areFetching }) => {\n  return (\n    <TodoItemBlock>\n      <CheckCircle done={done} onClick={() => !done && !areFetching && markTodoDone(id)}>\n        {done && <MdDone />}\n        {areFetching && <Loader />}\n      </CheckCircle>\n      <Text done={done}>{text}</Text>\n      <Remove>\n        <MdDelete onClick={() => !areFetching && deleteTodoById(id)} />\n      </Remove>\n      {fetchingError && <Text>{fetchingError}</Text>}\n    </TodoItemBlock>\n  )\n}\n\nexport default memo(TodoItem);\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { Loader } from \"../../../common/loader\";\nimport ListSkeleton from \"../../../common/skeleton/list\";\nimport TodoItem from \"../containers/item\";\n\nconst TodoListBlock = styled.ul`\n  position: relative;\n  flex: 1;\n  padding: 20px 32px;\n  padding-bottom: 48px;\n  overflow-y: auto;\n  ${props =>\n    props.disabled &&\n    css`\n      pointer-events: none;\n    `}\n`;\nconst Message = styled.div`\n  margin: 30px auto;\n  text-align: center;\n  font-size: 21px;\n  color: #49505778;\n`;\n\nconst TodoList = ({ data, loading, err }) => {\n  return (\n    <TodoListBlock disabled={loading}>\n      {\n        data.map(({ ...otherProps }, key) => (\n          <TodoItem key={key} id={key} {...otherProps} />\n        ))\n      }\n      {\n        loading && data.length === 0 ? <ListSkeleton /> :\n          loading && data.length > 0 && <Loader global/>\n      }\n      {\n        err ? <Message>{err.message}</Message> :\n          !data.length && !loading && <Message>Добавьте, пожалуйста, чем заняться!</Message>\n      }\n    </TodoListBlock>\n  );\n}\n\nexport default TodoList;\n","import styled from \"styled-components\";\n\nexport const Input = styled.input`\n  padding: 12px;\n  border-radius: 4px;\n  border: 1px solid #dee2e6;\n  width: 100%;\n  outline: none;\n  box-sizing: border-box;\n`;\n","import React from \"react\";\nimport styled, { css, keyframes } from \"styled-components\";\nimport { MdAdd } from \"react-icons/md\";\nimport { Input } from \"../../../common/input\";\nimport { CircleButton } from \"../../../common/button\";\n\nconst slideup = keyframes`\n    from {\n      padding-bottom: 40px;\n    }\n    to {\n      padding-bottom: 72px;\n    }\n  `;\nconst slidedown = keyframes`\n  from {\n    padding-bottom: 72px;\n    opacity: 1;\n  }\n  to {\n    padding-bottom: 0px;\n    opacity: 0;\n  }  \n`;\n\nconst InsertFormPositioner = styled.div`\n  width: 100%;\n  bottom: 0;\n  left: 0;\n  position: absolute;\n`;\nconst InsertForm = styled.form`\n  background: #f8f9fa;\n  padding-left: 32px;\n  padding-top: 32px;\n  padding-right: 32px;\n  padding-bottom: 72px;\n  animation-duration: 0.125s;\n  animation-timing-function: ease-out;\n  animation-name: ${slideup};\n  ${({ disappear }) =>\n    disappear &&\n    css`\n      animation-name: ${slidedown};\n      padding-bottom: 0px;\n    `}\n  border-bottom-left-radius: 16px;\n  border-bottom-right-radius: 16px;\n  border-top: 1px solid #e9ecef;\n`;\n\nconst TodoCreate = ({\n  localOpen,\n  open,\n  onToggle,\n  disappear,\n  animate,\n  onSubmit,\n  setInputRef\n}) => <>\n    {(localOpen || animate) && (\n      <InsertFormPositioner>\n        <InsertForm disappear={disappear} onSubmit={onSubmit}>\n          <Input\n            autoFocus\n            placeholder=\"После ввода нажмите Enter\"\n            ref={setInputRef}\n          />\n        </InsertForm>\n      </InsertFormPositioner>\n    )}\n    <CircleButton onClick={onToggle} open={open}>\n      <MdAdd />\n    </CircleButton>\n  </>\n\nexport default TodoCreate;\n","import { setCurrentPage, setPageSize } from \"../actions/todo\";\n\nexport default {\n\tpage: {\n\t\tselector: state => state.todos.pagination.currentPage,\n    action: setCurrentPage,\n    stringToValue: string => Number.parseInt(string) || 1\n  },\n  size: {\n\t\tselector: state => state.todos.pagination.pageSize,\n    action: setPageSize,\n    stringToValue: string => Number.parseInt(string) || 1\n  },\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Form, Row, Col, Button, Input } from 'antd';\nimport { PlusCircleFilled } from '@ant-design/icons';\nimport { getTodos } from '../../../../../store/actions/todo';\nimport Pagination from '../../../../../common/pagination';\n\nconst AddForm = ({ onFormSubmit, loading, pagination }) => {\n  const [form] = Form.useForm()\n\n  const dispatch = useDispatch()\n\n  const onFinish = () => {\n    onFormSubmit({\n      name: form.getFieldValue('name')\n    })\n    form.resetFields()\n  }\n\n  const onChange = (page, pageSize) => {\n    dispatch(getTodos({\n      page,\n      pageSize\n    }))\n  }\n\n  useEffect(() => {\n    dispatch(getTodos({\n      page: pagination.currentPage,\n      pageSize: pagination.pageSize\n    }))\n  }, []) // eslint-disable-line\n\n  return (\n    <Form\n      form={form}\n      onFinish={onFinish}\n      layout=\"horizontal\"\n    >\n      <Row justify='space-between'>\n        <Row gutter={15} >\n          <Col>\n            <Form.Item\n              name={'name'}\n              rules={[{\n                required: true,\n                message: 'This field is required'\n              }]}\n            >\n              <Input placeholder=\"What needs to be done?\" />\n            </Form.Item>\n          </Col>\n          <Col>\n            <Button type=\"primary\" htmlType=\"submit\" block disabled={loading}>\n              <PlusCircleFilled />\n            Add todo\n          </Button>\n          </Col>\n        </Row>\n\n        <Col>\n          <Pagination\n            current={pagination.currentPage}\n            total={pagination.totalCount}\n            pageSize={pagination.pageSize}\n            showSizeChanger\n            onChange={onChange}\n            pageSizeOptions={['1', '2', '5', '10']}\n          />\n        </Col>\n      </Row>\n\n    </Form>\n  )\n}\n\nexport default AddForm\n","import React from 'react';\r\nimport { Tag, List, Button, Popconfirm, Switch, Alert, Row, Col } from 'antd';\r\nimport { CloseOutlined, CheckOutlined } from '@ant-design/icons';\r\nimport styled from \"styled-components\";\r\n\r\nconst TagBox = styled(Tag)`\r\n  white-space: normal !important;\r\n  word-break: break-all;\r\n`;\r\n\r\nconst ColBox = styled(Col)`\r\n  margin: 10px 0px 0px 0px;\r\n`;\r\n\r\nconst RowBox = styled(Row)`\r\n  flex-direction: column !important; \r\n`;\r\n\r\nconst Item = ({ todo, onTodoRemoval, onTodoToggle }) => {\r\n  return (\r\n    <List.Item\r\n      actions={[\r\n        <Switch\r\n          loading={todo.areFetching}\r\n          checkedChildren={<CheckOutlined />}\r\n          unCheckedChildren={<CloseOutlined />}\r\n          onChange={state => onTodoToggle({ todo, state })}\r\n          checked={todo.details.done}\r\n        />,\r\n        <Popconfirm\r\n          disabled={todo.areFetching}\r\n          title=\"Are you sure you want to delete?\"\r\n          onConfirm={() => {\r\n            onTodoRemoval(todo)\r\n          }}\r\n        >\r\n          <Button type=\"primary\" danger disabled={todo.areFetching}>\r\n            X\r\n          </Button>\r\n        </Popconfirm>,\r\n      ]}\r\n      key={todo.details.id}\r\n    >\r\n      <RowBox>\r\n        <Col>\r\n          <TagBox color={todo.details.done ? 'green' : 'red'}>\r\n            {todo.details.text}\r\n          </TagBox>\r\n        </Col>\r\n        {\r\n          todo.fetchingError && \r\n          <ColBox>\r\n            <Alert message={todo.fetchingError} type=\"error\" showIcon closable />\r\n          </ColBox>\r\n        }\r\n      </RowBox>\r\n    </List.Item>\r\n  )\r\n}\r\n\r\nexport default Item\r\n","import React from 'react'\nimport { Alert, List } from 'antd'\nimport Item from '../item'\n\nconst TodoList = ({ err, loading, todos, onTodoRemoval, onTodoToggle }) => (\n  err ?\n    <Alert\n      message=\"Error Message\"\n      description={err}\n      type=\"error\"\n    />\n    :\n    <List\n      loading={loading}\n      locale={{\n        emptyText: \"There's nothing to do :(\"\n      }}\n      dataSource={todos}\n      renderItem={todo => (\n        <Item\n          todo={todo}\n          onTodoToggle={onTodoToggle}\n          onTodoRemoval={onTodoRemoval}\n        />\n      )}\n    />\n)\n\nexport default TodoList\n","import React from 'react'\r\nimport { Row, Card, PageHeader } from 'antd'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { markTodoDone, deleteTodo, createTodo } from '../../../store/actions/todo'\r\nimport AddTodoForm from './components/add'\r\nimport TodoList from './components/list'\r\nimport { Default } from '../../../common/responsive'\r\n\r\nconst TodosContainer = () => {\r\n  const { items, loading, err, pagination } = useSelector(state => state.todos)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const handleFormSubmit = (todo) => {\r\n    const data = {\r\n      text: todo.name,\r\n      done: false\r\n    }\r\n    dispatch(createTodo(data))\r\n  }\r\n\r\n  const handleRemoveTodo = (todo) => {\r\n    const data = {\r\n      id: todo.details.id\r\n    }\r\n    dispatch(deleteTodo(data))\r\n  }\r\n\r\n  const handleTodoToggle = ({ todo, state }) => {\r\n    const data = {\r\n      id: todo.details.id,\r\n      done: state\r\n    }\r\n    dispatch(markTodoDone(data))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Default>\r\n        <Row>\r\n          <PageHeader\r\n            title=\"Add Todo\"\r\n            subTitle=\"To add a todo, just fill the form below and click in add todo.\"\r\n          />\r\n        </Row>\r\n      </Default>\r\n      <Card title=\"Create a new todo\">\r\n        <AddTodoForm onFormSubmit={handleFormSubmit} loading={loading} pagination={pagination} />\r\n      </Card>\r\n      <Card title=\"Todo List\">\r\n        <TodoList\r\n          err={err}\r\n          loading={loading}\r\n          todos={items}\r\n          onTodoRemoval={handleRemoveTodo}\r\n          onTodoToggle={handleTodoToggle}\r\n        />\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TodosContainer\r\n","\r\nimport React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Template from \"./containers/template\";\r\nimport TodoHead from \"./containers/head\";\r\nimport TodoList from \"./containers/list\";\r\nimport TodoCreate from \"./containers/create\";\r\nimport { getTodos } from \"../../store/actions/todo\";\r\n\r\nimport reduxQuerySync from 'redux-query-sync';\r\nimport queries from \"../../store/queries/todo\";\r\nimport store from \"../../store\"\r\nimport TodosContainer from \"./table\";\r\nreduxQuerySync({\r\n  store,\r\n  params: queries,\r\n  initialTruth: 'location',\r\n  replaceState: true\r\n})\r\n\r\nconst pageTitle = \"todo - Main Page\"\r\nconst pageDescription = \"We love learning - every day, in every form.\"\r\n\r\nconst App = () => {\r\n  const { pagination } = useSelector(state => state.todos)\r\n\r\n  const getTodosAPI = () => {\r\n    return getTodos({\r\n      page: pagination.currentPage,\r\n      pageSize: pagination.pageSize\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{pageTitle}</title>\r\n        <meta property=\"og:title\" content={pageTitle} />\r\n        <meta name=\"description\" content={pageDescription} />\r\n        <meta name=\"twitter:title\" content={pageTitle} />\r\n        <meta name=\"twitter:description\" content={pageDescription} />\r\n      </Helmet>\r\n      <Template callOnPageVisibility={getTodosAPI}>\r\n        <TodosContainer />\r\n      </Template>\r\n      {/* <Template callOnPageVisibility={getTodosAPI}>\r\n        <TodoHead />\r\n        <TodoList />\r\n        <TodoCreate />\r\n      </Template> */}\r\n    </>\r\n  );\r\n}\r\nexport default App;\r\n"],"sourceRoot":""}